- job:
    name: OnMetal-All-In-One-Pipeline
    project-type: workflow
    concurrent: true
    parameters:
        - bool:
            name: CLEANUP
            description: Delete created servers after pipeline is run, regardless of success or failure
            default: true
        - string:
            name: RPC_TAG
            default: r13.1.0
        - string:
            name: OSA_BRANCH
            default: stable/mitaka
        - string:
            name: TEMPEST_TESTS
            default: scenario api defcore
        - choice:
            name: REGION
            description: Region of server to build in
            choices:
                - IAD
                - DFW
                - LON
        - choice:
            name: FLAVOR
            descrption: "Note: onmetal-io1 (OnMetal V1) is only avaialble in IAD"
            choices:
                - onmetal-io1
                - onmetal-io2
        - string:
            name: IMAGE
            description: Default is OnMetal - Ubuntu 14.04 LTS (Trusty Tahr)
            default: 9dc2bf0a-7771-45cd-a7f9-ce86ce94c548
        - string:
            name: SERVER_NAME
            description: >
               Optional name of host server. Defaults to Jenkins-OM-AIO-Pipeline-<build number>.
        - string:
            name: SLAVE_NAME
            description: >
               Optional name to give to slave that will be displayed in Jenkins. Defaults to same as SERVER_NAME.
        - string:
            name: OSA_OPS_REPO
            default: https://github.com/rcbops-qe/openstack-ansible-ops
        - string:
            name: OSA_OPS_BRANCH
            default: master
        - string:
            name: JENKINS_OA_REPO
            default: https://github.com/rcbops-qe/jenkins-oa
        - string:
            name: JENKINS_OA_BRANCH
            default: master
    scm:
        - git:
            url: $JENKINS_OA
            branches:
                - $JENKINS_OA_BRANCH
        - git:
            url: $OSA_OPS_REPO
            branches:
                - $OSA_OPS_BRANCH
    dsl: |
        node ('general') {
            if(SERVER_NAME == ""){
                SERVER_NAME = "Jenkins-OM-AIO-Pipeline-" + currentBuild.number
            }
            if (SLAVE_NAME == ""){
                SLAVE_NAME = SERVER_NAME
            }
            build_parameters = [
                string(name: 'REGION', value: region),
                string(name: 'FLAVOR', value: flavor),
                string(name: 'IMAGE', value: image),
                string(name: 'SERVER_NAME', value: SERVER_NAME),
                string(name: 'SLAVE_NAME', value: SLAVE_NAME),
                string(name: 'JENKINS_OA_REPO', value: JENKINS_OA_REPO),
                string(name: 'JENKINS_OA_BRANCH', value: JENKINS_OA_BRANCH),
                string(name: 'OSA_OPS_REPO', value: OSA_OPS_REPO),
                string(name: 'OSA_OPS_BRANCH', value: OSA_OPS_BRANCH),
                string(name: 'OSA_BRANCH', value: OSA_BRANCH),
                string(name: 'RPC_TAG', value: RPC_TAG),
                string(name: 'TEMPEST_TESTS', value: TEMPEST_TESTS)
            ]
            try {
                // Create a public cloud server and add as a Jenkins slave
                stage('Build OnMetal Host Server') {
                    build job: 'OnMetal-AIO-Build-Host', parameters: build_parameters
                }
                stage('Build Add Host Server as Slave Node') {
                    build job: 'OnMetal-AIO-Setup-Jenkins-Slave', parameters: build_parameters
                }

                // Run the all in one multi node setup on the cloud server
                node_build_parameters = build_parameters + [[$class: 'LabelParameterValue', name: 'NODE', label: SLAVE_NAME]]
                stage('Basic Host Server Setup') {
                    build job: 'OnMetal-AIO-Setup-Host', parameters: node_build_parameters
                }
                stage('Setup Cobbler on Host Server') {
                    build job: 'OnMetal-AIO-Setup-Cobbler', parameters: node_build_parameters
                }
                stage('Setup Virtual Networks') {
                    build job: 'OnMetal-AIO-Virtual-Networks', parameters: node_build_parameters
                }
                stage('Deploy VMs') {
                    build job: 'OnMetal-AIO-Deploy-VMs', parameters: node_build_parameters
                }
                stage('Setup for Deploying Openstack Ansible') {
                    build job: 'OnMetal-AIO-OpenStack-Setup', parameters: node_build_parameters
                }

                // Deploy RPC
                retry(2) {
                    stage('Deploy RPC') {
                        build job: 'OnMetal-AIO-Deploy-RPC', parameters: node_build_parameters
                    }
                }

                // Run tests, ignoring result to ensure remaining tests run
                def tempest
                stage('Run Tempest Tests') {
                    tempest = build job: 'OnMetal-AIO-Tempest-Tests', parameters: node_build_parameters, propagate: false
                }
                def horizon
                stage('Run Horizon Tests') {
                    horizon = build job: 'OnMetal-AIO-Horizon-Tests', parameters: node_build_parameters, propagate: false
                }
                def maas
                stage('Deploy MaaS'){
                    build job: 'OnMetal-AIO-Create-MaaS-Entities', parameters: build_parameters
                    build job: 'OnMetal-AIO-Deploy-MaaS', parameters: node_build_parameters, propagate: false
                }
                stage('Run MaaS Tests'){
                    maas = build job: 'OnMetal-AIO-MaaS-Tests', parameters: node_build_parameters, propagate: false
                }

                if (tempest.result != "SUCCESS" || horizon.result != "SUCCESS" || maas.result != "SUCCESS"){
                    print "Test jobs not successful, setting build to UNSTABLE"
                    currentBuild.result = 'UNSTABLE'
                }
            } catch (err) {
                print err
                currentBuild.result = 'FAILURE'
            } finally {
                if (CLEANUP.toBoolean() == true){
                    build job: 'OnMetal-AIO-Cleanup', parameters: build_parameters
                } else {
                    print "Skipping clean up"
                }
            }

        }
