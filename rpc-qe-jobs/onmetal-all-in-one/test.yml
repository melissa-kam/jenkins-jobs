- job:
    name: 'OnMetal-AIO-Tempest-Tests'
    description: >
        Runs tempest tests against an OnMetal All in One host.

    build-discarder:
        days-to-keep: 60
    concurrent: true
    parameters:
        - label:
            name: NODE
            description: "Name of Jenkins node to run on"
        - string:
            name: TEMPEST_TESTS
            default: scenario api defcore
    wrappers:
        - mask-passwords
    builders:
        - shell: |
            #!/bin/bash -ex
            UTILITY_CONTAINER=$(sudo ssh -T -oStrictHostKeyChecking=no infra2 sudo lxc-ls |grep utility)
            sudo ssh -T -oStrictHostKeyChecking=no infra2 sudo rm -rf /openstack/log/*_utility_*/*.xml
            sudo ssh -T -oStrictHostKeyChecking=no infra2 sudo lxc-attach -n "$UTILITY_CONTAINER" -v RUN_TEMPEST_OPTS='--serial' -- /opt/openstack_tempest_gate.sh ${TEMPEST_TESTS}
    publishers:
        - postbuildscript:
            script-only-if-succeeded: false
            builders:
                - shell: |
                    #!/usr/bin/sudo /bin/bash
                    set +e
                    set +x
                    rm -rf archive
                    mkdir archive

                    # Copy VM logs
                    scp -r infra2:/openstack/log archive/openstack
                    scp -r infra2:/var/log archive/local

                    # Collect OpenStack, RabbitMQ, and MySQL configs from containers
                    for container in $(sudo ssh -T -oStrictHostKeyChecking=no infra2 sudo lxc-ls); do
                        if [[ $container =~ .rabbit. ]]; then
                            scp -r $container:/etc/rabbitmq archive/etc/
                        elif [[ $container =~ .galera. ]]; then
                            scp -r $container:/etc/mysql archive/etc/
                        else
                            policy_file=$(sudo ssh -T -oStrictHostKeyChecking=no $container find /etc -name policy.json)
                            if [[ -n $policy_file ]]; then
                                src=$(dirname $policy_file)
                                scp -r $container:$src archive/etc/$container
                            fi
                        fi
                    done

                    for container in $(sudo ssh -T -oStrictHostKeyChecking=no cinder2 sudo lxc-ls); do
                        policy_file=$(sudo ssh -T -oStrictHostKeyChecking=no $container find /etc -name policy.json)
                        if [[ -n $policy_file ]]; then
                            src=$(dirname $policy_file)
                            scp -r $container:$src archive/etc/$container
                        fi
                    done

                    for container in $(sudo ssh -T -oStrictHostKeyChecking=no swift2 sudo lxc-ls); do
                        policy_file=$(sudo ssh -T -oStrictHostKeyChecking=no $container find /etc -name swift.conf)
                        if [[ -n $policy_file ]]; then
                            src=$(dirname $policy_file)
                            scp -r $container:$src archive/etc/$container
                        fi
                    done

                    # Jenkins user must be able to read all files to archive and transfer to
                    # the master. Unreadable files will cause the whole archive operation to fail
                    chown -R jenkins archive

                    # remove dangling/circular symlinks
                    find archive -type l -exec test ! -e {} \; -delete

                    # delete anything that isn't a file or directory - pipes, specials etc
                    find archive ! -type d  ! -type f -delete

                    # delete anything not readable by the jenkins user
                    find archive \
                      |while read f; \
                      do sudo -u jenkins [ -r $f ] || { echo $f; rm -rf $f; }; done

                    #don't return non-zero, ever.
                    :
        - junit:
            results: "**/tempest_results*.xml"
        - archive:
            artifacts: 'archive/**/*'
            allow-empty: true

- job:
    name: 'OnMetal-AIO-Horizon-Tests'
    description: >
        Triggers "horizon integration testing" job to run Horizon tests against an OnMetal All in One host dashboard.
    build-discarder:
        days-to-keep: 60
    concurrent: true
    parameters:
        - label:
            name: NODE
            description: "Name of Jenkins node to run tests against"
        - string:
            name: OSA_BRANCH
            default: stable/mitaka
    builders:
        - shell: |
            #!/bin/bash
            set +x
            echo "ADMIN_PWD=$(sudo grep keystone_auth_admin_password /etc/openstack_deploy/user_osa_secrets.yml  | awk '{print $2}')" > test.env
            echo "os_release=$OSA_BRANCH" >> test.env
            ip_address=$(sudo ifconfig bond0.101 | grep "inet addr" | awk -F: '{print $2}' | awk '{print $1}')
            echo "IP_ADDRESS=http://$ip_address/dashboard" >> test.env
        - trigger-builds:
            - project: horizon integration testing
              property-file: test.env
              block: true
